module.exports = {
  version: '1.2.0',
  init: function (pluginContext) {
    pluginContext.registerPolicy(require('./policies/example-policy'));
    pluginContext.registerCondition(require('./conditions/url-match'));
    pluginContext.registerGatewayRoute( app => {
      app.get('/gateway/token', function (req, res) {
        try{
          let secret = null;
          secret = '6UTcjMGZ3785URu4JgzNbb' ; // this is the keySecret generated by eg credential create
          let token = jwt.sign( {
              "sub": "6QuT3rJ8d43w4mdW6PGlAg", //keyId generated by eg create
              "name": "BERI Prelogin"
            },secret);
          console.log('TOKEN: ' + token);
          
          
          //verifying JWT token.
          //let decoded = jwt.verify(token ,'privateKey'); //Decoding JWT using keySecret 
          //console.dir(decoded, { depth : null ,colors : true});

          res.json({
            jwt: token
          });
        } catch(e){
          logger.error(`Generate JWT error with ${e}`);
          res.status(500).json(`There is something wrong with server: ${e}`);
        }
      });
    });
    pluginContext.registerAdminRoute(require('./routes/hello-admin'));

    pluginContext.eventBus.on('hot-reload', function ({ type, newConfig }) {
      console.log('hot-reload', type, newConfig);
    });
    pluginContext.eventBus.on('http-ready', function ({ httpServer }) {
      console.log('http ready');
    });
    pluginContext.eventBus.on('https-ready', function ({ httpsServer }) {
      console.log('https ready');
    });
    pluginContext.eventBus.on('admin-ready', function ({ adminServer }) {
      console.log('admin ready');
    });

  },
  policies:['example'], // this is for CLI to automatically add to "policies" whitelist in gateway.config
  options: {  // This is for CLI to ask about params 'eg plugin configure example'
    baseUrl: {
      title: 'Base Url',
      description: 'the base url to initialize',
      type: 'string',
      required: true
    },
    maxRequestsPerSecond: {
      title: 'Max Requests per second',
      description: 'the max rps value',
      type: 'number'
    }
  }
};
